---
title: "lab3"
author: "Nick Gembs"
date: "2/6/2023"
output: html_document
---
---
title: ""
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Lab 03 - The `apply` family of functions

## apply

The `apply` function is used to evaluate a function (apply a function)
over a specified dimension (or dimensions) of a matrix or an array.

For example, we can implement the `rowSums` function as follows:

```{r}
M <- matrix( 1:12, 4, 3 )
M
rowSums(M)
apply(X = M, MARGIN = 1, FUN = sum)
```

The `X` argument to `apply` specifies which object we are going to
operate on. The `MARGIN` argument specifies which dimension we are
going to loop over. And the `FUN` argument specifies which function
we are going to evaluate (apply).

To help me remember the arguments, I read them in reverse order,
saying "apply FUN, looping over MARGIN, to X".


The mnemonic is especially useful for multidimensional arrays,
where it's easy to confuse yourself. The following code
applies the function `mean`, looping over dimensions 2 and 3,
to the object A:

```{r}
A <- array( 1:27, c(3,3,3) )
A
mA <- apply(A, c(2,3), mean )
mA
```

In a double loop, the code would look like this

```{r}
for(i3 in 1:3){
    for(i2 in 1:3){
        print( A[,i2,i3] )
        print( mean(A[,i2,i3] ) )
	print("")
    }
}
```


## lapply

`lapply` applies the function in its second argument to
each element of the list in the first argument

```{r}
dat <- data.frame( nums = 1:6, lets = letters[1:6], cols = as.factor(rep(c("blue","red","green"),2)) )
dat
lapply( dat, class )
```

The above code works on a data frame because a data frame inherits
properties from lists. The return value of lapply is a list, possibly
a named list of the input list is named.

In all apply functions, the supplied function can be an "anonymous function",
which simply means that the function is defined in the argument to the
apply function, without specifying a name for the function. Here is an
example

```{r}
lapply( dat, function(x) x[c(1,3,5)] )
```

## sapply

`sapply` is very similar to `lapply`, but it automatically tries to make
the output a vector.

```{r}
sapply( dat, class )
```

It will give a named vector if the list items have names.

## tapply

`tapply` partitions a vector into groups, according to one or more factors,
and applies a function to the values of the vector in each group. If that's
a bit of a word salad, let's just look at an example

```{r}
dat
tapply( dat$nums, dat$cols, max )
```

## mapply

`mapply` addresses the problem of applying a function repeatedly
when more than one of its arguments differs from application to
application. Suppose I have a vector of numbers of rows, and
another vector of numbers of columns, and I want to create
a list of matrices with with those numbers of rows and columns.
I can use `mapply` for that:

```{r}
nrows <- c(2,4,3,5)
ncols <- c(4,2,3,2)
mapply( matrix, nrow = nrows, ncol = ncols )
```

You can use the `MoreArgs` argument to supply other arguments to
the function, such as in this example, the default value in
the matrix

```{r}
nrows <- c(2,4,3,5)
ncols <- c(4,2,3,2)
mapply( matrix, nrow = nrows, ncol = ncols, MoreArgs = list(data = 0) )
```

In this case, you could have simply supplied `data = 0` as another
argument to `mapply`, and it would have used recycling, or you could
have set `data = rep(0,length(nrows))`.


# Exercises

1. Use `apply` to compute column sums of the matrix in the first section.

```{r}
M <- matrix( 1:12, 4, 3 )
colSums(M)
apply(X = M, MARGIN = 2, FUN = sum)
```


2. Read in the airline data and use one of the apply functions to
figure out how many missing values there are in each column of the
airline data. Make sure the output is a named vector.

```{r}
dat = read.csv("../datasets/airline_2019-07-01.csv")
str(dat)
```